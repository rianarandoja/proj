import xml.etree.ElementTree as ET
from tkinter import *
from urllib.request import urlopen
import webbrowser

def getWeatherInformation(place):
    base_url = urlopen("http://www.ilmateenistus.ee/ilma_andmed/xml/observations.php")  # Avab lingi, kus asuvad ilmaandmed.
    weather_data = ET.parse(base_url)                 # Parsib sisu
    root = weather_data.getroot()                     # Hangib failipuu?
    base_url.close()                                  # Sulgen lingi

    place = place.capitalize()      # Teen kasutaja sisendi programmile arusaadavaks.
    if place == "Tartu":            # Muudan sisendit, et see klapiks xml'iga.
        place = "Tartu-Tõravere"
    elif place == "Tallinn":
        place = "Tallinn-Harku"
    elif place == "Pärnu":
        place = "Pärnu-Sauga"
    elif place == "Narva":
        place = "Narva-Jõesuu"
    elif place == "Türi":
        place = "Türi-Alliku"
    elif place == "Rannu":
        place = "Rannu-Jõesuu"

    weather_forecast = {}                             # Siia läheb informatsioon ilma kohta, mida hiljem ekraanile kuvatakse.

    for weather in root.findall('station'):           # Käin kõik märksõnad "station" läbi.
        station_name = weather.find("name").text      # Kui leian otsitud koha, lisan vajaliku sõnastikku ja katkestan tsükli

        if station_name == place:
            weather_forecast["air_temperature"] = "Temperatuur: " + str(weather.find('airtemperature').text) + " °C"
            weather_forecast["wind_speed"] = "Tuule kiirus: " + str(weather.find('windspeed').text) + " m/s"
            weather_forecast["visibility"] = "Nähtavus: " + str(weather.find('visibility').text) + " km"
            weather_forecast["air_pressure"] = "Õhurõhk: " + str(weather.find('airpressure').text) + " hPa"
            weather_forecast["precipitations"] = "Sademed: " + str(weather.find('precipitations').text) + " mm"
            weather_forecast["wind_direction"] = "Tuule suund: " + str(weather.find('winddirection').text) + " °"
            weather_forecast["relative_humidity"] = "Õhuniiskus: " + str(weather.find('relativehumidity').text)

            window_background = str(weather.find('phenomenon').text) # Määrab akna tausta.
            break

    if weather_forecast == {}:
        webbrowser.open('http://www.ilmateenistus.ee/') # Kui sisend on arusaamatu, avaneb brauser.
    else:

        root = Tk()  # Akna loomine.
        root.title(station_name)
        root.geometry("600x300")
        root.resizable(width=FALSE, height=FALSE)
        canvas = Canvas(root, width=600, height=300, background="white")

        try:  # Kui peaks juhtuma, et xml'ist tuleb ootamatu väljund.
            photo = PhotoImage(file=".\\Photos_for_weather\\" + str(window_background) + ".gif")
            Canvas_Image = canvas.create_image(0, 0, image=photo, anchor="nw")
        except:
            try:  # Kui peaks juhtuma, et programm ei pääse failidele ligi.
                photo = PhotoImage(file=".\\Photos_for_weather\\Clear.gif")
                Canvas_Image = canvas.create_image(0, 0, image=photo, anchor="nw")
            except:
                pass

        i = 15
        canvas.create_rectangle(10, 10, 240, 270, fill="white")
        for element in weather_forecast:   # Kuvab tsükliga andmed ekraanile.
            i += 30
            canvas.create_text(15, i, text=str(weather_forecast[element]), font="Calibri 9",anchor="w")

        # Juriidiline osa:
        canvas.create_text(13, i + 30 , text=" Andmed: Riigi Ilmateenistus \n http://www.ilmateenistus.ee/", font="Calibri 9",anchor="w")

        canvas.pack()
        mainloop()
